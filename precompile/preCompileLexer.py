# Generated from preCompile.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\67")
        buf.write("\u0149\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f")
        buf.write("\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3%\3%\3&\3&\3&\3\'\3\'")
        buf.write("\3\'\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3,\3,\3,\3")
        buf.write(",\3-\3-\3-\3.\3.\3.\3/\3/\3/\3\60\3\60\7\60\u0102\n\60")
        buf.write("\f\60\16\60\u0105\13\60\3\61\3\61\5\61\u0109\n\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u0110\n\61\3\62\6\62\u0113\n")
        buf.write("\62\r\62\16\62\u0114\3\63\3\63\3\63\5\63\u011a\n\63\3")
        buf.write("\64\6\64\u011d\n\64\r\64\16\64\u011e\3\65\6\65\u0122\n")
        buf.write("\65\r\65\16\65\u0123\3\65\3\65\5\65\u0128\n\65\3\66\3")
        buf.write("\66\3\66\3\66\7\66\u012e\n\66\f\66\16\66\u0131\13\66\3")
        buf.write("\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\7\67\u013c")
        buf.write("\n\67\f\67\16\67\u013f\13\67\3\67\3\67\38\68\u0144\n8")
        buf.write("\r8\168\u0145\38\38\3\u012f\29\3\3\5\4\7\5\t\6\13\7\r")
        buf.write("\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!")
        buf.write("\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61")
        buf.write("a\62c\2e\2g\63i\64k\65m\66o\67\3\2\n\5\2C\\aac|\6\2\62")
        buf.write(";C\\aac|\6\2\f\f\17\17$$^^\r\2$$))\62\62AA^^cdhhppttv")
        buf.write("vxx\3\2\62;\4\2C\\c|\4\2\f\f\17\17\5\2\13\f\17\17\"\"")
        buf.write("\2\u0151\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2")
        buf.write("\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2g\3\2\2\2\2i\3")
        buf.write("\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\3q\3\2\2\2\5z")
        buf.write("\3\2\2\2\7|\3\2\2\2\t~\3\2\2\2\13\u0080\3\2\2\2\r\u0088")
        buf.write("\3\2\2\2\17\u008c\3\2\2\2\21\u0091\3\2\2\2\23\u0096\3")
        buf.write("\2\2\2\25\u0098\3\2\2\2\27\u009a\3\2\2\2\31\u009c\3\2")
        buf.write("\2\2\33\u009e\3\2\2\2\35\u00a0\3\2\2\2\37\u00a2\3\2\2")
        buf.write("\2!\u00a4\3\2\2\2#\u00a8\3\2\2\2%\u00af\3\2\2\2\'\u00b3")
        buf.write("\3\2\2\2)\u00b5\3\2\2\2+\u00b7\3\2\2\2-\u00b9\3\2\2\2")
        buf.write("/\u00bb\3\2\2\2\61\u00bd\3\2\2\2\63\u00c0\3\2\2\2\65\u00c3")
        buf.write("\3\2\2\2\67\u00c6\3\2\2\29\u00c9\3\2\2\2;\u00cc\3\2\2")
        buf.write("\2=\u00cf\3\2\2\2?\u00d1\3\2\2\2A\u00d3\3\2\2\2C\u00d5")
        buf.write("\3\2\2\2E\u00d8\3\2\2\2G\u00db\3\2\2\2I\u00dd\3\2\2\2")
        buf.write("K\u00df\3\2\2\2M\u00e2\3\2\2\2O\u00e5\3\2\2\2Q\u00e8\3")
        buf.write("\2\2\2S\u00eb\3\2\2\2U\u00ee\3\2\2\2W\u00f2\3\2\2\2Y\u00f6")
        buf.write("\3\2\2\2[\u00f9\3\2\2\2]\u00fc\3\2\2\2_\u00ff\3\2\2\2")
        buf.write("a\u010f\3\2\2\2c\u0112\3\2\2\2e\u0119\3\2\2\2g\u011c\3")
        buf.write("\2\2\2i\u0121\3\2\2\2k\u0129\3\2\2\2m\u0137\3\2\2\2o\u0143")
        buf.write("\3\2\2\2qr\7%\2\2rs\7k\2\2st\7p\2\2tu\7e\2\2uv\7n\2\2")
        buf.write("vw\7w\2\2wx\7f\2\2xy\7g\2\2y\4\3\2\2\2z{\7>\2\2{\6\3\2")
        buf.write("\2\2|}\7@\2\2}\b\3\2\2\2~\177\7)\2\2\177\n\3\2\2\2\u0080")
        buf.write("\u0081\7%\2\2\u0081\u0082\7f\2\2\u0082\u0083\7g\2\2\u0083")
        buf.write("\u0084\7h\2\2\u0084\u0085\7k\2\2\u0085\u0086\7p\2\2\u0086")
        buf.write("\u0087\7g\2\2\u0087\f\3\2\2\2\u0088\u0089\7k\2\2\u0089")
        buf.write("\u008a\7p\2\2\u008a\u008b\7v\2\2\u008b\16\3\2\2\2\u008c")
        buf.write("\u008d\7e\2\2\u008d\u008e\7j\2\2\u008e\u008f\7c\2\2\u008f")
        buf.write("\u0090\7t\2\2\u0090\20\3\2\2\2\u0091\u0092\7x\2\2\u0092")
        buf.write("\u0093\7q\2\2\u0093\u0094\7k\2\2\u0094\u0095\7f\2\2\u0095")
        buf.write("\22\3\2\2\2\u0096\u0097\7}\2\2\u0097\24\3\2\2\2\u0098")
        buf.write("\u0099\7\177\2\2\u0099\26\3\2\2\2\u009a\u009b\7=\2\2\u009b")
        buf.write("\30\3\2\2\2\u009c\u009d\7.\2\2\u009d\32\3\2\2\2\u009e")
        buf.write("\u009f\7?\2\2\u009f\34\3\2\2\2\u00a0\u00a1\7*\2\2\u00a1")
        buf.write("\36\3\2\2\2\u00a2\u00a3\7+\2\2\u00a3 \3\2\2\2\u00a4\u00a5")
        buf.write("\7\60\2\2\u00a5\u00a6\7\60\2\2\u00a6\u00a7\7\60\2\2\u00a7")
        buf.write("\"\3\2\2\2\u00a8\u00a9\7t\2\2\u00a9\u00aa\7g\2\2\u00aa")
        buf.write("\u00ab\7v\2\2\u00ab\u00ac\7w\2\2\u00ac\u00ad\7t\2\2\u00ad")
        buf.write("\u00ae\7p\2\2\u00ae$\3\2\2\2\u00af\u00b0\7h\2\2\u00b0")
        buf.write("\u00b1\7q\2\2\u00b1\u00b2\7t\2\2\u00b2&\3\2\2\2\u00b3")
        buf.write("\u00b4\7,\2\2\u00b4(\3\2\2\2\u00b5\u00b6\7\61\2\2\u00b6")
        buf.write("*\3\2\2\2\u00b7\u00b8\7\'\2\2\u00b8,\3\2\2\2\u00b9\u00ba")
        buf.write("\7-\2\2\u00ba.\3\2\2\2\u00bb\u00bc\7/\2\2\u00bc\60\3\2")
        buf.write("\2\2\u00bd\u00be\7>\2\2\u00be\u00bf\7>\2\2\u00bf\62\3")
        buf.write("\2\2\2\u00c0\u00c1\7@\2\2\u00c1\u00c2\7@\2\2\u00c2\64")
        buf.write("\3\2\2\2\u00c3\u00c4\7>\2\2\u00c4\u00c5\7?\2\2\u00c5\66")
        buf.write("\3\2\2\2\u00c6\u00c7\7@\2\2\u00c7\u00c8\7?\2\2\u00c88")
        buf.write("\3\2\2\2\u00c9\u00ca\7?\2\2\u00ca\u00cb\7?\2\2\u00cb:")
        buf.write("\3\2\2\2\u00cc\u00cd\7#\2\2\u00cd\u00ce\7?\2\2\u00ce<")
        buf.write("\3\2\2\2\u00cf\u00d0\7(\2\2\u00d0>\3\2\2\2\u00d1\u00d2")
        buf.write("\7`\2\2\u00d2@\3\2\2\2\u00d3\u00d4\7~\2\2\u00d4B\3\2\2")
        buf.write("\2\u00d5\u00d6\7(\2\2\u00d6\u00d7\7(\2\2\u00d7D\3\2\2")
        buf.write("\2\u00d8\u00d9\7~\2\2\u00d9\u00da\7~\2\2\u00daF\3\2\2")
        buf.write("\2\u00db\u00dc\7A\2\2\u00dcH\3\2\2\2\u00dd\u00de\7<\2")
        buf.write("\2\u00deJ\3\2\2\2\u00df\u00e0\7,\2\2\u00e0\u00e1\7?\2")
        buf.write("\2\u00e1L\3\2\2\2\u00e2\u00e3\7\61\2\2\u00e3\u00e4\7?")
        buf.write("\2\2\u00e4N\3\2\2\2\u00e5\u00e6\7\'\2\2\u00e6\u00e7\7")
        buf.write("?\2\2\u00e7P\3\2\2\2\u00e8\u00e9\7-\2\2\u00e9\u00ea\7")
        buf.write("?\2\2\u00eaR\3\2\2\2\u00eb\u00ec\7/\2\2\u00ec\u00ed\7")
        buf.write("?\2\2\u00edT\3\2\2\2\u00ee\u00ef\7>\2\2\u00ef\u00f0\7")
        buf.write(">\2\2\u00f0\u00f1\7?\2\2\u00f1V\3\2\2\2\u00f2\u00f3\7")
        buf.write("@\2\2\u00f3\u00f4\7@\2\2\u00f4\u00f5\7?\2\2\u00f5X\3\2")
        buf.write("\2\2\u00f6\u00f7\7(\2\2\u00f7\u00f8\7?\2\2\u00f8Z\3\2")
        buf.write("\2\2\u00f9\u00fa\7`\2\2\u00fa\u00fb\7?\2\2\u00fb\\\3\2")
        buf.write("\2\2\u00fc\u00fd\7~\2\2\u00fd\u00fe\7?\2\2\u00fe^\3\2")
        buf.write("\2\2\u00ff\u0103\t\2\2\2\u0100\u0102\t\3\2\2\u0101\u0100")
        buf.write("\3\2\2\2\u0102\u0105\3\2\2\2\u0103\u0101\3\2\2\2\u0103")
        buf.write("\u0104\3\2\2\2\u0104`\3\2\2\2\u0105\u0103\3\2\2\2\u0106")
        buf.write("\u0108\7$\2\2\u0107\u0109\5c\62\2\u0108\u0107\3\2\2\2")
        buf.write("\u0108\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u0110\7")
        buf.write("$\2\2\u010b\u010c\7)\2\2\u010c\u010d\5e\63\2\u010d\u010e")
        buf.write("\7)\2\2\u010e\u0110\3\2\2\2\u010f\u0106\3\2\2\2\u010f")
        buf.write("\u010b\3\2\2\2\u0110b\3\2\2\2\u0111\u0113\5e\63\2\u0112")
        buf.write("\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0112\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115d\3\2\2\2\u0116\u011a\n\4\2")
        buf.write("\2\u0117\u0118\7^\2\2\u0118\u011a\t\5\2\2\u0119\u0116")
        buf.write("\3\2\2\2\u0119\u0117\3\2\2\2\u011af\3\2\2\2\u011b\u011d")
        buf.write("\t\6\2\2\u011c\u011b\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011fh\3\2\2\2\u0120")
        buf.write("\u0122\t\7\2\2\u0121\u0120\3\2\2\2\u0122\u0123\3\2\2\2")
        buf.write("\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0127\3")
        buf.write("\2\2\2\u0125\u0126\7\60\2\2\u0126\u0128\7j\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128j\3\2\2\2\u0129\u012a")
        buf.write("\7\61\2\2\u012a\u012b\7,\2\2\u012b\u012f\3\2\2\2\u012c")
        buf.write("\u012e\13\2\2\2\u012d\u012c\3\2\2\2\u012e\u0131\3\2\2")
        buf.write("\2\u012f\u0130\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0132")
        buf.write("\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0133\7,\2\2\u0133")
        buf.write("\u0134\7\61\2\2\u0134\u0135\3\2\2\2\u0135\u0136\b\66\2")
        buf.write("\2\u0136l\3\2\2\2\u0137\u0138\7\61\2\2\u0138\u0139\7\61")
        buf.write("\2\2\u0139\u013d\3\2\2\2\u013a\u013c\n\b\2\2\u013b\u013a")
        buf.write("\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f\u013d\3\2\2\2")
        buf.write("\u0140\u0141\b\67\2\2\u0141n\3\2\2\2\u0142\u0144\t\t\2")
        buf.write("\2\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0143")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write("\u0148\b8\2\2\u0148p\3\2\2\2\17\2\u0101\u0103\u0108\u010f")
        buf.write("\u0114\u0119\u011e\u0123\u0127\u012f\u013d\u0145\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class preCompileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    IDENTIFIER = 47
    STRING = 48
    CONSTANT = 49
    LIB = 50
    BlockComment = 51
    LineComment = 52
    WS = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'''", "'#define'", "'int'", "'char'", 
            "'void'", "'{'", "'}'", "';'", "','", "'='", "'('", "')'", "'...'", 
            "'return'", "'for'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", 
            "'>>'", "'<='", "'>='", "'=='", "'!='", "'&'", "'^'", "'|'", 
            "'&&'", "'||'", "'?'", "':'", "'*='", "'/='", "'%='", "'+='", 
            "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "STRING", "CONSTANT", "LIB", "BlockComment", "LineComment", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "IDENTIFIER", "STRING", "CHARSEQ", "CHAR", 
                  "CONSTANT", "LIB", "BlockComment", "LineComment", "WS" ]

    grammarFileName = "preCompile.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


